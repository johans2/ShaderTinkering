// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel FlashInput
#pragma kernel UpdatePhysics

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;
float trampleSmooth;
float trampleCutoff;
float4 tramplePos;
float width;
float height;

sampler2D Input;

[numthreads(8,8,1)]
void FlashInput(uint3 id : SV_DispatchThreadID)
{
	// Update the result texture based on the deformation pos.

	//Result[id.xy] = float4(id.x & id.y, (id.x & 15)/15.0, (id.y & 15)/15.0, 0.0);
    Result[id.xy] = float4(1.0, 0.0, 0.0, 0.0);
}

[numthreads(8, 8, 1)]
void UpdatePhysics(uint3 id : SV_DispatchThreadID)
{
    
    float dist = pow(1 - distance(float2(id.x / width, id.y / height), float2(tramplePos.x, tramplePos.z)), abs(trampleSmooth));

    float min = 1.0 - trampleCutoff;
    float x = max(dist - min, 0);
    float g = x / trampleCutoff;

    float s = step(trampleCutoff, dist);
    dist = lerp(0.0, dist, s);


    float4 color = float4(g, g, 0, 0);


	
	//float s = step(0.1f,  abs(id.x / width - tramplePos.x));
	float m  = max(id.x / width - tramplePos.x, 0);
	//float4 x = float4(tramplePos.x, 0,0,0);

	Result[id.xy] = color;
}