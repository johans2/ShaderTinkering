// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel UpdatePhysics
#include "TexturePackingUtils.cginc"

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;
RWStructuredBuffer<float4> imgBuffer;

float trampleSmooth;
float trampleCutoff;
float4 tramplePos;
float width;
float height;

float dTime;

sampler2D Input;


[numthreads(8, 8, 1)]
void UpdatePhysics(uint3 id : SV_DispatchThreadID)
{
	// IDEA:	Use the structuredbuffer in the geometry shader for trample lookup. This will allow us to write negative numbers
	//			directly into the buffer and use them for trample offset (we can't use negative numbers in the result texture). 
	//			Create a separate kernel for the texture writing. This is purely for debug purposes. In that texture we can clamp the
	//			values to write actual color.
    
    float2 diffVector = float2(tramplePos.x, tramplePos.z) - float2(id.x / width, id.y / height);

    //float distanceFactor = abs((1 - length(diffVector)) * (1 - smoothstep(0, trampleCutoff, length(diffVector))));
    float distanceFactor = 1-  smoothstep(0, trampleCutoff, length(diffVector));
    
    float xC = ((float) sign(diffVector.x)) * (1 - smoothstep(0, trampleCutoff, abs(diffVector.x))) * distanceFactor;
    float yC = ((float) sign(diffVector.y)) * (1 - smoothstep(0, trampleCutoff, abs(diffVector.y))) * distanceFactor;
    
	// Get the current color from the buffer
	float4 currentColor = imgBuffer[width * id.x + id.y];

	// Update the value
    float xCPacked = (xC + 1.0) / 2;
    float yCPacked = (yC + 1.0) / 2;

    currentColor = float4(xC, yC, 0, 0);

    float4 currentColorPacked = float4(xCPacked, yCPacked, 0, 0);

	// Write the value to the result texture
    Result[id.xy] = currentColorPacked;

	// Save it in the buffer again
    imgBuffer[width * id.x + id.y] = currentColor;



/*   psudo code for 2D -> 1D array indexing
	int array[width * height];

	 int SetElement(int row, int col, int value)
	 {
		array[width * row + col] = value;  
	 }
	 */
}

