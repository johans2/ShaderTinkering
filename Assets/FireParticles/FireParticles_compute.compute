#pragma kernel UpdateParticles

// Noise functions from https://github.com/keijiro/NoiseShader/blob/master/Assets/HLSL/SimplexNoise3D.hlsl
#include "SimplexNoise3D.hlsl"


struct Particle
{
    float3 position;
    float3 velocity;
    float life;
	float3 startPos;
	float3 convergenceTarget;
	float STRIDE_FILLER1;
	float STRIDE_FILLER2;
	float STRIDE_FILLER3;
};

struct MeshTriangle
{
    float3 vert1;
    float3 vert2;
    float3 vert3;
};


StructuredBuffer<MeshTriangle> meshBuffer;
RWStructuredBuffer<Particle> particleBuffer;

// Variables set from the CPU
float deltaTime;
float curlE;
float curlMultiplier;
float particleMinLife;
float particleMaxLife;
float3 emitterPos;
float3 emitterScale;
float3 emitterRot;
float3 convergencePoint;
float convergenceStrength;
float updraft;


float randSeed;

int numVertices;

const float uintMax = 4294967296.0;

// A super fast way of generating random numbers. 
// http://www.reedbeta.com/blog/quick-and-easy-gpu-random-numbers-in-d3d11/
uint rng_state;
uint rand_xorshift()
{
    rng_state ^= (rng_state << 13);
    rng_state ^= (rng_state >> 17);
    rng_state ^= (rng_state << 5);
    return rng_state;
}

uint wang_hash(uint seed)
{
    seed = (seed ^ 61) ^ (seed >> 16);
    seed *= 9;
    seed = seed ^ (seed >> 4);
    seed *= 0x27d4eb2d;
    seed = seed ^ (seed >> 15);
    return seed;
}


// https://github.com/cabbibo/glsl-curl-noise/blob/master/curl.glsl
float3 snoiseVec3(float3 x)
{

    float s = snoise(x);
    float s1 = snoise(float3(x.y - 19.1, x.z + 33.4, x.x + 47.2));
    float s2 = snoise(float3(x.z + 74.2, x.x - 124.5, x.y + 99.4));
    float3 c = float3(s, s1, s2);
    return c;
}


float3 curlNoise(float3 p, float E)
{

    float e = E;
    float3 dx = float3(e, 0.0, 0.0);
    float3 dy = float3(0.0, e, 0.0);
    float3 dz = float3(0.0, 0.0, e);

    float3 p_x0 = snoiseVec3(p - dx);
    float3 p_x1 = snoiseVec3(p + dx);
    float3 p_y0 = snoiseVec3(p - dy);
    float3 p_y1 = snoiseVec3(p + dy);
    float3 p_z0 = snoiseVec3(p - dz);
    float3 p_z1 = snoiseVec3(p + dz);

    float x = p_y1.z - p_y0.z - p_z1.y + p_z0.y;
    float y = p_z1.x - p_z0.x - p_x1.z + p_x0.z;
    float z = p_x1.y - p_x0.y - p_y1.x + p_y0.x;

    const float divisor = 1.0 / (2.0 * e);
    return normalize(float3(x, y, z) * divisor);

}

float PI = 3.14159265359;

//https://stackoverflow.com/questions/14607640/rotating-a-vector-in-3d-space
float3 RotateAroundX(float3 p, float angle) {

	angle = (3.14159265359 / 180.0) * -angle;

	float3x3 m = float3x3(	1, 0, 0,
							0, cos(angle), -sin(angle),
							0, sin(angle), cos(angle)
							);

	return mul(p, m);
}

float3 RotateAroundY(float3 p, float angle) {

	angle = (3.14159265359 / 180.0) * -angle;

	float3x3 m = float3x3(
			cos(angle), 0, sin(angle),
			0, 1, 0,
			-sin(angle), 0, cos(angle)
		);

	return mul(p, m);
}

float3 RotateAroundZ(float3 p, float angle) {
	angle = (3.14159265359 / 180.0) * -angle;

	float3x3 m = float3x3(
		cos(angle), -sin(angle), 0,
		sin(angle), cos(angle), 0,
		0, 0, 1
		);

	return mul(p, m);
}

float3 GetRandomPointOnTriangle(MeshTriangle tri, uint rngState)
{
    rng_state = rngState;

    // Get a random float position on one side of the triangle
    float rng01 = float(wang_hash(rng_state) * (1.0 / 4294967296.0));
    float3 sideA = lerp(tri.vert1, tri.vert3, rng01);

    // Update the random state
    rng_state += randSeed;

    // Get a random float position on the other side of the triangle
    rng01 = float(wang_hash(rng_state) * (1.0 / 4294967296.0));
    float3 sideB = lerp(tri.vert2, tri.vert3, rng01);

    // Update the random state
    rng_state += randSeed;
    
    // Get the final random position between the two above calculated ones.
    rng01 = float(wang_hash(rng_state) * (1.0 / 4294967296.0));
    float3 finalPoint = lerp(sideA, sideB, rng01);

    return finalPoint;
}

[numthreads(256, 1, 1)]
void UpdateParticles(uint3 id : SV_DispatchThreadID)
{
    
	// subtract the life based on deltaTime
    particleBuffer[id.x].life -= deltaTime;
    
	// Update the position by curling it
	particleBuffer[id.x].position += curlNoise(particleBuffer[id.x].position, curlE) * curlMultiplier + float3(0, updraft, 0);

	// Update the position by the convergence.
	float2 convergence = normalize( particleBuffer[id.x].convergenceTarget.xz - particleBuffer[id.x].position.xz);
	convergence *= convergenceStrength;
	convergence *= clamp( (particleBuffer[id.x].position.y - emitterPos.y) / ( convergencePoint.y - emitterPos.y ), 0,1);

	particleBuffer[id.x].position.xz += convergence;

    if (particleBuffer[id.x].life <= 0)
    {
        rng_state = id.x + randSeed;
        
        uint randomIndex = float(wang_hash(rng_state)) * (1.0 / 4294967296.0) * float(numVertices);
        MeshTriangle tri = meshBuffer[randomIndex % numVertices];
        
		float3 newPos = GetRandomPointOnTriangle(tri, rng_state);

		// Mirror the transform of the emitter
		newPos = RotateAroundZ(newPos, emitterRot.z);
		newPos = RotateAroundY(newPos, emitterRot.y);
		newPos = RotateAroundX(newPos, emitterRot.x);
		newPos *= emitterScale;
		newPos += emitterPos;


		// Set the new position
        particleBuffer[id.x].position = newPos;
		
		// Set the starting position
		particleBuffer[id.x].startPos = newPos;
		
		// Set the convergence point
		particleBuffer[id.x].convergenceTarget = emitterPos + convergencePoint;

		// reset the life of this particle
        particleBuffer[id.x].life = lerp(particleMinLife, particleMaxLife, float(wang_hash(id.x) * (1.0 / 4294967296.0)));

    }

}
